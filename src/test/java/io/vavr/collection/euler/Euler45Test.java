/* ____  ______________  ________________________  __________
 * \   \/   /      \   \/   /   __/   /      \   \/   /      \
 *  \______/___/\___\______/___/_____/___/\___\______/___/\___\
 *
 * Copyright 2023 Vavr, https://vavr.io
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.vavr.collection.euler;

import io.vavr.collection.Stream;
import io.vavr.collection.List;
import org.assertj.core.api.Assertions;
import org.junit.Test;

import static org.assertj.core.api.Assertions.assertThat;

public class Euler45Test {

    /**
     * <strong>Problem 45 Triangular, pentagonal, and hexagonal</strong>
     *
     * <p>Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:</p>
     * <p>Triangle      Tn=n(n+1)/2     1, 3,  6, 10, 15, ...</p>
     * <p>Pentagonal    Pn=n(3n−1)/2    1, 5, 12, 22, 35, ...</p>
     * <p>Hexagonal     Hn=n(2n−1)      1, 6, 15, 28, 45, ...</p>
     *
     * <p>
     * It can be verified that T285 = P165 = H143 = 40755.
     * Find the next triangle number that is also pentagonal and hexagonal.
     * </p>
     * <p>
     * See also <a href="https://projecteuler.net/problem=45">projecteuler.net
     * problem 45</a>.
     */

    @Test
    public void shouldSolveProblem45() {
        assertThat(List.of(5, 12, 22, 35)).allMatch(Euler45Test::isPentagonal);
        assertThat(List.of(3, 11, 21, 36)).allMatch(i -> !isPentagonal(i));
        Assertions.assertThat(HEXAGONAL.take(5)).containsExactly(6L, 15L, 28L, 45L, 66L);

        assertThat(HEXAGONAL
                .filter(Euler45Test::isPentagonal)
                .head())
                .isEqualTo(40755);

        assertThat(HEXAGONAL
                .filter(Euler45Test::isPentagonal)
                .tail()
                .head())
                .isEqualTo(1533776805L);
    }

    /*  分析：这道题目相对比较简单直接。
        首先可以观察到一个六边形数即是一个奇数位置的三角数，比如1是第一个三角形数，6是第三个三角形数，15是第五个三角形数。
        事实上，对任意奇数(2n−1)，将其代入三角形数的通项有：(2n−1)(2n−1+1)/2=n(2n−1) 即是一个六边形数。
        所以六边形数只是三角形数的子集，当一个数是六边形数，我们无需再验证它是否是三角形数。
        在上一道题即第四十四题中，我们已经编写了一个判断一个数是否为五边形数的函数，这里可以直接复用。
        我们从 n=144 开始依次生成六边形数，再判断生成的数是否为五边形数，如果不是再生成下一个数，如果是则返回该六边形数，即为所求。*/

    // 定义一个名为HEXAGONAL的常量流(Stream)，类型为Long
    private static final Stream<Long> HEXAGONAL =
            // 创建一个从2L开始的无限正整数序列流(Stream)
            Stream.from(2L)
                    // 将每个元素i乘以(2 * i - 1)得到六边形数列，并将结果映射到新流中
                    .map(i -> i * (2 * i - 1));

    private static boolean isPentagonal(long i) {
        // If a number k is pentagonal then n(3n−1)/2 = k; for some integer n
        // by the quadratic formula (1+sqrt(1+4*3*2k))/6 = n
        // 如果一个数k是五边形数，则存在整数n，使得 n(3n-1)/2=k
        // 根据一元二次方程的求解公式：(1+sqrt(1+4*3*2k))/6 = n
        long discriminant = 1 + 24 * i; // 判别式
        return isPerfectSquare(discriminant) && (1 + flooredRoot(discriminant)) % 6 == 0;
        // 首先判断判别式是否为完全平方数，然后再验证n是否为整数，并且满足模6余1或者模6余5的条件
    }

    /**
     * 判断是否为完全平方数
     *
     * @param i 要判断的数
     * @return boolean类型，如果是完全平方数，则返回true；否则，返回false
     */
    private static boolean isPerfectSquare(long i) {
        // 取i的平方根向下取整
        long sqrtFloor = flooredRoot(i);
        // 判断该平方根是否是实际完全平方数的平方值
        return sqrtFloor * sqrtFloor == i;
    }

    /**
     * 计算一个数的整数开方向下取整的结果。
     *
     * @param i 要取整数开方的数
     * @return 整数开方向下取整的结果
     */
    private static long flooredRoot(long i) {
        // 在原数上加上 0.5，使其不会因为浮点数误差而被错误地舍入。
        // 然后对结果进行平方根运算，使用强制类型转换将其转为 long 类型并返回。
        return (long) Math.sqrt(i + 0.5);
    }
}
